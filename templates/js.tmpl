#   vim: set filetype=javascript:

module
    var no = require( 'nommon' );
    var R = require( 'teya/lib/runtime.js' );
    var M = {};

    var to_array = R.to_array;
    var to_string = R.to_string;
    var to_number = R.to_number;
    var to_xml = R.to_xml;
    var copy_attrs = R.copy_attrs;
    var to_tagname = R.to_tagname;
    var attrs = R.attrs;

    %contents:content

    %vars:define

    function init_vars( x0 ) {
        %vars:def
    }

    %defs

    module.exports = function( x0, id ) {
        init_vars( x0 );

        var a0 = attrs();

        return M[ id ]( x0, a0 );
    };

module_vars :define [ !ast.is_empty() ]
    var %.:list;

def_template
    function t_%{name}( x%rid, a%rid, content, vars ) {
        %body:prologue
        %vars:resolve_vars
        %body:output
        return r%rid;
    }
    M[ '%name' ] = t_%name;

def_var :def [ ast.value.is_inline() ]
    //  %name: %get_type()
    var %.:name = %value:value;

def_var :def
    %value:prologue
    %value:output
    %.:epilogue

def_var :epilogue [ ast.value.get_type() === 'attr' ]
    //  %name: %get_type()
    var %.:name = a%{value.rid};

def_var :epilogue
    //  %name: %get_type()
    var %.:name = r%value.rid;

def_var :name
    v%{vid}_%normalize_name()

def_var :list
    %.:name

#   ---------------------------------------------------------------------------------------------------------------   #

block :content
    function c%{cid}( x0, a0, vars ) {
        //  FIXME: Тут должен быть полный пролог.
        var r%rid = '';
        %vars:resolve_vars
        %.:output
        return r%rid;
    }

inline_var :resolve_vars
    var %def:name = vars[ '%name' ];

#   ---------------------------------------------------------------------------------------------------------------   #

* :prologue [ ast.get_type() === 'object' ]
    var r%rid = {};

* :prologue [ ast.get_type() === 'array' ]
    var r%rid = [];

* :prologue [ ast.get_type() === 'attr' ]
    var a%rid = attrs();

* :prologue [ ast.get_type() === 'json' ]

* :prologue [ ast.get_type() === 'xml' ]
    var r%rid = '', a%rid = attrs();

* :prologue
    var r%rid = '';

#   ---------------------------------------------------------------------------------------------------------------   #

block :output
    %defs:def

    %exprs:output

#   ---------------------------------------------------------------------------------------------------------------   #

if :value [ ast.is_inline() ]
    ( %condition:value ) ? %then.exprs:cast : %elses:cast

if :output
    if ( %condition:value ) %then:if_body %elses:if_body

block :if_body
    {
        %.:output
    }

else_if :if_body
    else if ( %condition:value ) %body:if_body

else :cast
    %body.exprs:cast

else :if_body
    else {
        %body:output
    }

#   ---------------------------------------------------------------------------------------------------------------   #

for :output
    var items%xid = to_array( %selector:value );
    for ( var i%xid = 0, l%xid = items%{xid}.length; i%xid < l%xid; i%xid++ ) {
        var x%body.xid = items%xid[ i%xid ];
        %body:output
    }

#   ---------------------------------------------------------------------------------------------------------------   #

value :cast
    %value:cast

value :value
    %value:value

value :output [ ast.get_type() === 'string' || ast.get_type() === 'xml' ]
    r%rid += %value:cast;

value :output [ ast.get_type() === 'attr' ]
    a%{rid}.copy( %value:value );

value :output [ !ast.to_type ]
    r%rid = %value:cast;

value :output
    r%rid += %value:cast;

#   ---------------------------------------------------------------------------------------------------------------   #

template :output [ ast.content.vars ]
    r%rid += t_%{name}( x%xid, a%rid, c%content.cid, { %content.vars:content_vars } );

template :output
    r%rid += t_%{name}( x%xid, a%rid, c%content.cid );

inline_var :content_vars
    '%name': %def:name

#   ---------------------------------------------------------------------------------------------------------------   #

subexpr :output
    %body:output

#   ---------------------------------------------------------------------------------------------------------------   #

jpath :value
    no.jpath( '%teya()', x%xid )

#   ---------------------------------------------------------------------------------------------------------------   #

inline_binop :cast
    %left:cast %op %right:cast

inline_binop :value
    %left:value %op %right:value

inline_unop :value
    %op%left:value

inline_ternary :value
    ( %condition:value ) ? %then:value : %else:value

inline_number :value
    %value

inline_subexpr :value
    ( %expr:value )

#   ---------------------------------------------------------------------------------------------------------------   #

inline_string :cast
    %value:cast

inline_string :value
    %value:cast

string_literal :name
    %stringify()

string_literal :cast
    %.:value

string_literal :value
    '%stringify()'

string_expr :value
    %expr:cast

#   ---------------------------------------------------------------------------------------------------------------   #

inline_var :value
    %.:name

inline_var :name
    v%{def.vid}_%def.normalize_name()

#   ---------------------------------------------------------------------------------------------------------------   #

inline_func :value
    %name( %args )

inline_func_arg
    %value:value

#   ---------------------------------------------------------------------------------------------------------------   #

true :value
    true

false :value
    false

#   ---------------------------------------------------------------------------------------------------------------   #

object :output
    %body:output

inline_pair :output [ ast.value.is_inline() ]
    r%rid[ %key:value ] = %value:value;

pair :output
    %value:prologue
    %value:output
    r%rid[ %key:value ] = r%value.rid;

#   ---------------------------------------------------------------------------------------------------------------   #

array :output
    %body:output

#   FIXME: Хочется иметь один push на все item'ы.
#   Сейчас это невозможно сделать из-за текущей реализации шаблонов.
#
inline_item :output
    r%{rid}.push( %value:value );

#   ---------------------------------------------------------------------------------------------------------------   #

xml :output
    %.:start
    %content:output
    %.:end

xml :start [ ast.name.is_const() && ( ast.content.starts_with_attr() !== false ) ]
    r%rid += '<%name:name';
    a%rid = attrs( '%name:name', {
        %attrs:output
    } );

xml :start [ ast.name.is_const() ]
    r%rid += %.:static_name;

xml :static_name [ ast.attrs.is_empty() ]
    '<%name:name>'

xml :static_name
    '<%name:name' + %attrs:inline + '>'

xml :start [ ast.content.starts_with_attr() !== false ]
    var n%nid = to_tagname( %name:cast );
    r%rid += '<' + n%nid;
    a%rid = attrs( n%nid, {
        %attrs:output
    } );

xml :start
    var n%nid = to_tagname( %name:cast );
    r%rid += %.:dynamic_name;

xml :dynamic_name [ ast.attrs.is_empty() ]
    '<' + n%nid + '>'

xml :dynamic_name
    '<' + n%nid + %attrs:inline + '>'

xml :end [ ast.name.is_const() ]
    r%rid += '</%name:name>';

xml :end
    r%rid += '</' + n%nid + '>';

xml_attr :inline
    ' %name="' + %value:value + '"'

xml_attr :output
#   FIXME: Тут, видимо, должно быть %value:cast?
    '%name': %value:value

close_attrs :output
    r%rid += a%{rid}.close();

attr :output [ ast.value.is_inline() && ast.op === '+=' ]
    a%{rid}.add( '%name:cast', %value:cast );

attr :output [ ast.value.is_inline() ]
    a%{rid}.set( '%name:cast', %value:cast );

#   ---------------------------------------------------------------------------------------------------------------   #

param_content :output

    r%rid += content( x%xid, a%rid, vars );

#   ---------------------------------------------------------------------------------------------------------------   #

* :default_value [ ast.get_type() === 'object' ]
    {}

* :default_value [ ast.get_type() === 'array' ]
    []

* :default_value [ ast.get_type() === 'boolean' ]
    false

* :default_value
    ''

#   ---------------------------------------------------------------------------------------------------------------   #

inline_expr :cast [ ast.to_type === 'string' || ast.to_type === 'xml' || ast.to_type === 'number' ]
    to_%{to_type}( %.:value )

inline_expr :cast [ ast.from_type === 'json' ]
    to_%{to_type}( %.:value )

inline_expr :cast [ ast.from_type && ast.to_type ]
    %{from_type}_to_%{to_type}( %.:value )

inline_expr :cast
    %.:value

