module
    var m0 = {};

    %vars:define

    function init_vars( x0 ) {
        %vars:init
    }

    %defs

    module.exports = function( x0, id ) {
        init_vars( x0 );

        return m0[ id ]( x0 );
    };

module_vars :define [ !ast.is_empty() ]
    var %.:list;

def_template
    m0[ "%name" ] = function %{name}() {
        %body:prologue
        %body
        %body:epilogue
    };

def_var :init
    %.:name = %value:value;

def_var :name
    v%{vid}_%normalize_name()

def_var :list
    %.:name

#   ---------------------------------------------------------------------------------------------------------------   #

block :prologue [ ast.get_type() === 'object' ]
    var r%rid = {};

block :prologue [ ast.get_type() === 'array' ]
    var r%rid = [];

block :prologue [ ast.get_type() === 'attr' ]
    //  FIXME

block :prologue
    var r%rid = '';

#   ---------------------------------------------------------------------------------------------------------------   #

block :epilogue
    return r%rid;

#   ---------------------------------------------------------------------------------------------------------------   #

block
    %defs

    %exprs

#   ---------------------------------------------------------------------------------------------------------------   #

if
    if ( %condition:value ) %then:if_body %elses:if_body

block :if_body
    {
        %.
    }

else_if :if_body
    else if ( %condition:value ) %body:if_body

else :if_body
    else {
        %body
    }

#   ---------------------------------------------------------------------------------------------------------------   #

for
    var items%cid = to_array( %selector:value );
    for ( var i%cid = 0, l%cid = items%{cid}.length; i%cid < l%cid; i%cid++ ) {
        var x%body.cid = items%cid[ i%cid ];
        %body
    }

#   ---------------------------------------------------------------------------------------------------------------   #

value
    r%rid += %value:value;

#   ---------------------------------------------------------------------------------------------------------------   #

jpath :value
    no.jpath( "%teya()", x%cid )

#   ---------------------------------------------------------------------------------------------------------------   #

inline_binop :value
    %left:value %op %right:value

inline_unop :value
    %op%left

inline_ternary :value
    ( %condition:value ) ? %then:value : %else:value

inline_number :value
    %value

inline_subexpr :value
    ( %expr:value )

#   ---------------------------------------------------------------------------------------------------------------   #

inline_string :value
    %value:value

string_literal :value
    "%stringify()"

string_expr :value
    %expr:value

#   ---------------------------------------------------------------------------------------------------------------   #

inline_var :value
    %name

#   ---------------------------------------------------------------------------------------------------------------   #

inline_func :value
    %name( %args )

inline_func_arg
    %value:value

#   ---------------------------------------------------------------------------------------------------------------   #

true :value
    true

false :value
    false

#   ---------------------------------------------------------------------------------------------------------------   #

object
    %body

inline_pair
    r%rid[ %key:value ] = %value:value;

#   ---------------------------------------------------------------------------------------------------------------   #

array
    %body

#   FIXME: Хочется иметь один push на все item'ы.
#   Сейчас это невозможно сделать из-за текущей реализации шаблонов.
#
inline_item
    r%{rid}.push( %value:value );


#   ---------------------------------------------------------------------------------------------------------------   #

* :default_value [ ast.get_type() === 'object' ]
    {}

* :default_value [ ast.get_type() === 'array' ]
    []

* :default_value [ ast.get_type() === 'boolean' ]
    false

* :default_value
    ""

