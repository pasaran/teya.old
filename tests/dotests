#!/usr/bin/env node

// vim: set filetype=javascript:

//  ---------------------------------------------------------------------------------------------------------------  //

var fs_ = require( 'fs' );
var path_ = require( 'path' );

require( 'no.colors' );

var teya = require( '../lib/teya.js' );
var Terror = require( '../lib/terror.js' );

//  ---------------------------------------------------------------------------------------------------------------  //

var files = get_files();

var oks = 0;
var fails = 0;

for (var i = 0, l = files.length; i < l; i++) {
    var fn = files[ i ];

    var content = fs_.readFileSync( fn, 'utf-8' );
    var test = eval( '(' + content + ')' );

    var teya_fn = test.teya || fn.replace( /\.test$/, '.teya' );
    var data_fn = test.data || fn.replace( /\.test$/, '.data' );
    var tid = test.template || 'page';

    try {
        var result = teya.run( teya_fn, tid, data_fn );

        if ( test.result === result ) {
            ok( fn );
        } else {
            fail( fn );
        }

    } catch ( e ) {
        if ( test.error && ( e instanceof Terror ) && part_of( test.error, e.error ) ) {
            ok( fn );

        } else {
            fail( fn );
        }
    }
}

total();

//  ---------------------------------------------------------------------------------------------------------------  //

function ok( filename ) {
    oks++;

    console.log( filename, 'ok'.green );
}

function fail( filename ) {
    fails++;

    console.log( filename, 'fail'.red );
}

function total() {
    console.log();
    console.log( 'ok: %s, fail: %s\n', oks.toString().green, fails.toString().red );
}


//  ---------------------------------------------------------------------------------------------------------------  //

function part_of( obj1, obj2 ) {
    if ( !obj1 ) {
        return obj1 === obj2;
    }

    if ( typeof obj1 === 'object' ) {
        if ( typeof obj2 !== 'object' ) {
            return false;
        }

        for ( var key in obj1 ) {
            if ( !part_of( obj1[ key ], obj2[ key ] ) ) {
                return false;
            }
        }

        return true;
    }

    return obj1 === obj2;
}

//  ---------------------------------------------------------------------------------------------------------------  //

function get_files( dir, result ) {
    dir = dir || '.';
    result = result || [];

    var items = fs_.readdirSync( dir ).sort();
    for ( var i = 0, l = items.length; i < l; i++ ) {
        var item = path_.join( dir, items[ i ] );

        var stat = fs_.statSync( item );
        if ( stat.isFile() && /\.test$/.test( item ) ) {
            result.push( item );
        } else if ( stat.isDirectory() ) {
            get_files( item, result );
        }
    }

    return result;
}

//  ---------------------------------------------------------------------------------------------------------------  //

