#!/usr/bin/env node

// vim: set filetype=javascript:

//  ---------------------------------------------------------------------------------------------------------------  //

var fs_ = require( 'fs' );
var path_ = require( 'path' );

var no = require( 'nommon' );
require( 'no.colors' );

var teya = require( '../lib/teya.js' );
var Terror = require( '../lib/terror.js' );

//  ---------------------------------------------------------------------------------------------------------------  //

console.log( '' );

var files = get_files();

var oks = 0;
var fails = 0;

for (var i = 0, l = files.length; i < l; i++) {
    var filename = files[ i ];

    var content = fs_.readFileSync( filename, 'utf-8' );
    var tests = eval( '(' + content + ')' );
    if ( !Array.isArray( tests ) ) {
        tests = [ tests ];
    }

    var test_oks = 0;
    var test_fails = 0;
    var k = tests.length;

    var line = no.string.pad_left( filename, 30 ).gray + ' ';

    var teya_filename = filename.replace( /\.test$/, '.teya' );

    for ( var j = 0; j < k; j++ ) {
        var test = tests[ j ];

        var data_filename = test.data;
        var template = test.template || 'page';

        try {
            var result = teya.run( teya_filename, template, data_filename );

            if ( test.result === result ) {
                test_oks++;
                line += '*'.green;
            } else {
                test_fails++;
                line += '*'.red;
            }

        } catch ( e ) {
            if ( test.error && ( e instanceof Terror ) && part_of( test.error, e.error ) ) {
                test_oks++;
                line += '*'.green;

            } else {
                test_fails++;
                line += '*'.red;
            }
        }
    }

    console.log( line );

    oks += test_oks;
    fails += test_fails;
}

console.log();
console.log( 'ok: %s, fail: %s\n', oks.toString().green, fails.toString().red );

//  ---------------------------------------------------------------------------------------------------------------  //

function part_of( obj1, obj2 ) {
    if ( !obj1 ) {
        return obj1 === obj2;
    }

    if ( typeof obj1 === 'object' ) {
        if ( typeof obj2 !== 'object' ) {
            return false;
        }

        for ( var key in obj1 ) {
            if ( !part_of( obj1[ key ], obj2[ key ] ) ) {
                return false;
            }
        }

        return true;
    }

    return obj1 === obj2;
}

//  ---------------------------------------------------------------------------------------------------------------  //

function get_files( dir, result ) {
    dir = dir || '.';
    result = result || [];

    var items = fs_.readdirSync( dir ).sort();
    for ( var i = 0, l = items.length; i < l; i++ ) {
        var item = path_.join( dir, items[ i ] );

        var stat = fs_.statSync( item );
        if ( stat.isFile() && /\.test$/.test( item ) ) {
            result.push( item );
        } else if ( stat.isDirectory() ) {
            get_files( item, result );
        }
    }

    return result;
}

//  ---------------------------------------------------------------------------------------------------------------  //

