#!/usr/bin/env node

// vim: set filetype=javascript:

//  ---------------------------------------------------------------------------------------------------------------  //

var fs_ = require( 'fs' );
var path_ = require( 'path' );

var _ = require( 'lodash' );
var nopt = require( 'nopt' );

var no = require( 'nommon' );
require( 'no.colors' );

var teya = require( '../lib/teya.js' );
require( '../lib/actions.js' );
require( '../lib/terror.js' );

//  ---------------------------------------------------------------------------------------------------------------  //

var options = nopt(
    {
        'diff': String,
        'result': String
    },
    {
        'd': '--diff',
        'r': '--result',
    }
);

var mode;
if ( options.diff ) {
    mode = 'diff';
} else if ( options.result ) {
    mode = 'result';
} else {
    mode = 'compact';
}

//  ---------------------------------------------------------------------------------------------------------------  //

console.log( '' );

var files = get_files();

var oks = 0;
var fails = 0;
var known = 0;

for (var i = 0, l = files.length; i < l; i++) {
    var filename = files[ i ];

    var content = fs_.readFileSync( filename, 'utf-8' );
    var tests = eval( '(' + content + ')' );
    if ( !Array.isArray( tests ) ) {
        tests = [ tests ];
    }

    var k = tests.length;

    var teya_filename = filename.replace( /\.test$/, '.teya' );

    var output = '';
    for ( var j = 0; j < k; j++ ) {
        var test = tests[ j ];

        var data = test.data;
        if ( typeof data === 'string' && /\.(data|json)$/.test( data ) ) {
            //  Резолвим имя файла с данными относительно имени файла с самим тестом.
            data = path_.join( path_.dirname( filename ), data );
        }
        var template = test.template || 'page';

        var ok_color = ( test.known ) ? 'aqua' : 'green';
        var error_color = ( test.known ) ? 'yellow' : 'red';

        try {
            var result = teya.run( teya_filename, template, data );

            if ( _.isEqual( test.result, result ) ) {
                oks++;
                switch ( mode ) {
                    case 'compact':
                        output += '*'[ ok_color ];
                        break;
                    case 'result':
                    case 'diff':
                        output += format_result( result )[ ok_color ] + '\n\n';
                        break;
                }

            } else {
                if ( test.known ) {
                    known++;
                } else {
                    fails++;
                }

                switch ( mode ) {
                    case 'compact':
                        output += '*'[ error_color ];
                        break;
                    case 'result':
                        output += format_result( result )[ error_color ] + '\n\n';
                        break;
                    case 'diff':
                        output += format_result( test.result )[ ok_color ] + '\n' + format_result( result )[ error_color ] + '\n\n';
                        break;
                }
            }

        } catch ( e ) {
            if ( test.error && ( e instanceof teya.Terror ) && ( e.id === test.error.id ) && _.isEqual( test.error.params, e.params ) ) {
                oks++;
                switch ( mode ) {
                    case 'compact':
                        output += '*'[ ok_color ];
                        break;
                    case 'result':
                    case 'diff':
                        output += 'throws'[ ok_color ] + '\n';
                        break;
                }

            } else {
                if ( test.known ) {
                    known++;
                } else {
                    fails++;
                }

                switch ( mode ) {
                    case 'compact':
                        output += '*'[ error_color ];
                        break;
                    case 'result':
                    case 'diff':
                        output += 'throws'[ error_color ] + '\n';
                        break;
                }
            }
        }
    }

    switch ( mode ) {
        case 'compact':
            output = no.string.pad_left( filename, 30 ).gray + ' ' + output;
            break;
        case 'result':
        case 'diff':
            output = output.replace( /^/gm, no.string.repeat( ' ', 20 ) );
            output = no.string.pad_left( filename, 30 ).gray + '\n' + output;
    }

    console.log( output );
}

console.log();

var output = '';
if ( oks ) {
    output += 'ok: ' + oks.toString().green;
}
if ( fails + known ) {
    if ( oks ) {
        output += ', ';
    }
    output += 'fails: ';
    if ( fails ) {
        output += fails.toString().red;
    }
    if ( known ) {
        if ( fails ) {
            output += ' + ';
        }
        output += known.toString().yellow;
    }
}
console.log( output, '\n' );

//  ---------------------------------------------------------------------------------------------------------------  //

function format_result( result ) {
    if ( typeof result !== 'string' ) {
        return JSON.stringify( result, null, 4 );
    }

    if ( !result ) {
        return '""';
    }

    return result;
}

//  ---------------------------------------------------------------------------------------------------------------  //

function get_files( dir, result ) {
    var argv = process.argv;
    if ( !result && ( argv.length > 1 ) ) {
        result = [];
        for ( var i = 2; i < argv.length; i++ ) {
            var arg = argv[ i ];
            if ( /\.test$/.test( arg ) ) {
                result.push( arg );
            }
        }

        if ( result.length ) {
            return result;
        }
    }

    result = result || [];

    dir = dir || '.';

    var items = fs_.readdirSync( dir ).sort();
    for ( var i = 0, l = items.length; i < l; i++ ) {
        var item = path_.join( dir, items[ i ] );

        var stat = fs_.statSync( item );
        if ( stat.isFile() && /\.test$/.test( item ) ) {
            result.push( item );
        } else if ( stat.isDirectory() ) {
            get_files( item, result );
        }
    }

    return result;
}

//  ---------------------------------------------------------------------------------------------------------------  //

